name: Manual release

on:
  workflow_dispatch:
    inputs:
      version:
        type: string

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ch-migrate

jobs:
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set version variable
      run: |
        VERSION=${{ github.event.inputs.version }}
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"
        echo "Version: $VERSION"

    - name: Set image namespace variable
      run: |
        NAMESPACE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "NAMESPACE=$NAMESPACE" >> "$GITHUB_ENV"
        echo "Namespace: $NAMESPACE"

    - name: Check if image tag exists on GHCR
      run: |
        EXISTS_GHCR=false
        if docker manifest inspect ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}; then
          echo "$NAMESPACE/$IMAGE_NAME image tag $VERSION exists on GHCR"
          EXISTS_GHCR=true
        fi
        echo "EXISTS_GHCR=$EXISTS_GHCR" >> $GITHUB_ENV

    - name: Check if image tag exists on Docker Hub
      run: |
        EXISTS_DOCKERHUB=false
        if docker manifest inspect docker.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}; then
          echo "$NAMESPACE/$IMAGE_NAME image tag $VERSION exists on Docker Hub"
          EXISTS_DOCKERHUB=true
        fi
        echo "EXISTS_DOCKERHUB=$EXISTS_DOCKERHUB" >> $GITHUB_ENV

    - name: Fail if both DockerHub and GHCR images exist
      run: |
        if [ "$EXISTS_GHCR" = "true" ] && [ "$EXISTS_DOCKERHUB" = "true" ]; then
          echo "Both DockerHub and GHCR image tags exist. Failing the pipeline."
          exit 1
        fi

    - name: Build docker image
      run: |
        docker build \
          --build-arg APP_VERSION=${{ env.VERSION }} \
          -t ${{ env.IMAGE_NAME }}:current \
          ./src/ClickHouse.Migrate 

    - name: Tag docker image
      run: |
        docker tag ${{ env.IMAGE_NAME }}:current ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
        docker tag ${{ env.IMAGE_NAME }}:current ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        docker tag ${{ env.IMAGE_NAME }}:current ${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
        docker tag ${{ env.IMAGE_NAME }}:current ${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

    - name: List local docker images
      run: docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.Size}}"

    - name: Login to GHCR
      if: env.EXISTS_GHCR != 'true'
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Push images to GHCR
      if: env.EXISTS_GHCR != 'true'
      run: |
        docker push ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
        docker push ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

    - name: Login to Docker Hub
      if: env.EXISTS_DOCKERHUB != 'true'
      run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ env.NAMESPACE }} --password-stdin

    - name: Push images to Docker Hub
      if: env.EXISTS_DOCKERHUB != 'true'
      run: |
        docker push ${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

  pack-and-push-nuget:
    name: Pack and Push NuGet Package
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Pack .NET CLI tool
      run: |
        dotnet pack ./src/ClickHouse.Migrate/ \
          -c Release \
          -o ./nuget \
          /p:Version=${{ github.event.inputs.version }}

    - name: Publish to NuGet.org
      run: |
        dotnet nuget push ./nuget/*.nupkg \
          --skip-duplicate \
          --source https://api.nuget.org/v3/index.json \
          --api-key ${{ secrets.NUGET_ORG_API_KEY }}

    - name: Upload NuGet package artifact
      uses: actions/upload-artifact@v4
      with:
        name: ch-migrate-nuget
        path: ./nuget/*.nupkg

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-push-docker, pack-and-push-nuget]

    steps:
    - name: Download NuGet artifact
      uses: actions/download-artifact@v4
      with:
        name: ch-migrate-nuget
        path: ./release-assets

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: "${{ github.event.inputs.version }}"
        token: ${{ secrets.RELEASE_GITHUB_TOKEN }}
        generateReleaseNotes: true
        draft: true
        prerelease: false
        artifacts: ./release-assets/*.nupkg
